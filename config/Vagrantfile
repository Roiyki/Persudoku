Vagrant.configure("2") do |config|
  config.vm.boot_timeout = 600

  config.vm.provider "virtualbox" do |vb|
    vb.customize ["modifyvm", :id, "--cableconnected1", "on"]
    vb.customize ['modifyvm', :id, '--graphicscontroller', 'vmsvga']
    vb.gui = false
    vb.memory = "2048"
    vb.cpus = 4
  end

  # Define the VM
  config.vm.define "pyapp" do |server|
    server.vm.box = "ubuntu/focal64"
    # Configuring networking settings
    server.vm.network "forwarded_port", guest: 46027, host: 46027
    server.vm.network "forwarded_port", guest: 8080, host: 8888
    server.vm.network "forwarded_port", guest: 30000, host: 30000
    server.vm.network "forwarded_port", guest: 8000, host: 8000
    server.vm.network "private_network", ip: "192.168.50.68"

    # Provisioning
    server.vm.provision "shell" do |shell|
      shell.privileged = true  # Set privileged attribute earlier

      shell.inline = <<-SHELL
        # Install Docker and dependencies
        sudo apt-get update
        sudo apt-get install -y \
          apt-transport-https \
          ca-certificates \
          curl \
          gnupg-agent \
          software-properties-common 
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
        sudo add-apt-repository \
          "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
          $(lsb_release -cs) \
          stable" 
        sudo apt-get update
        sudo apt-get install -y docker-ce docker-ce-cli containerd.io 
        sudo usermod -aG docker $USER

        # Install kubectl
        sudo curl -L "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl" -o /usr/local/bin/kubectl 
        sudo chmod +x /usr/local/bin/kubectl 

        # Install kinD
        sudo curl -L "https://kind.sigs.k8s.io/dl/v0.20.0/kind-$(uname)-amd64" -o /usr/local/bin/kind
        sudo chmod +x /usr/local/bin/kind 
        
        # Verify KinD installation
        if ! command -v kind &> /dev/null; then
          echo "Error: KinD installation failed"
          exit 1
        fi

        # Install Helm
        sudo curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
        sudo chmod 700 get_helm.sh
        ./get_helm.sh
        
        # Create kind.config.yaml file
        cat <<EOF > /home/vagrant/kind-config.yaml
kind: Cluster
apiVersion: kind.x-k8s.io/v1alpha4
nodes:
 - role: control-plane
   extraPortMappings:
   - containerPort: 8000
     hostPort: 8000
     listenAddress: "127.0.0.1"
 - role: worker
 - role: worker
EOF

        # Create KinD cluster
        echo "Current working directory: $(pwd)"
        # Verify if kind-config.yaml exists
        if [ -f "/home/vagrant/kind-config.yaml" ]; then
          echo "kind-config.yaml file exists. Proceeding to create KinD cluster..."
          # Change permissions of the file
          sudo chmod +rwx /home/vagrant/kind-config.yaml

          # Verify cluster creation
          sudo kind create cluster --name my-cluster --config /home/vagrant/kind-config.yaml
        else
          echo "Error: kind-config.yaml file not found."
        fi
        # Print the content of kind-config.yaml for debugging
        echo "Content of kind-config.yaml:"
        cat kind-config.yaml

        # Check if kind-config.yaml exists
        if [ -f "kind-config.yaml" ]; then
        echo "kind-config.yaml file exists. Proceeding to create KinD cluster..."
        # Create KinD cluster
        sudo kind create cluster --name my-cluster --config ./kind-config.yaml
        else
        echo "Error: kind-config.yaml file not found."
        fi
        # Install the Helm chart
        # Clone your Git repository
        git clone https://github.com/Roiyki/Persudoku.git
        mkdir mongodb_data
        cd Persudoku/charts/appchart

        # Serve the Helm chart repository over HTTP
        sudo python3 -m http.server 8080 &

        # Wait for the HTTP server to start
        sleep 10

        # Check if the HTTP server is running
        if ! curl -s http://localhost:8080/index.yaml; then
          echo "Error: HTTP server failed to start"
          exit 1
        fi

        # Add the Helm chart repository to Helm
        sudo helm repo add my-repo http://localhost:8080
        sudo helm repo update

        
        sudo helm install sudoku-app my-repo/appchart

        # Get application URL
        export NODE_PORT=$(sudo kubectl get --namespace default -o jsonpath="{.spec.ports[0].nodePort}" services sudoku-app)
        export NODE_IP=$(sudo kubectl get nodes --namespace default -o jsonpath="{.items[0].status.addresses[0].address}")
        echo "Application URL: http://$NODE_IP:$NODE_PORT"
      SHELL
    end
  end
end
