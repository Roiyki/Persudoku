stages {
    stage('checkout git') {
        steps {
            script {
                checkout scm
            }
        }
    }

    // Build and push with build tag (replace with actual build commands)
    stage('Build and Push the image with tags') {
        environment {
            auth = 'dockerauth'
        }
        steps { 
            container('slave') {
                script {
                    def image = docker.build("roiyki/persudoku-flask", "./app/Backend")
                    withDockerRegistry(credentialsId: 'docker-credentials') {
                        image.push("${env.BUILD_NUMBER}")
                        image.push("latest")
                    }
                }
            }
        }
    }

    stage('Deploy with Argo CD') {
        steps {
            script {
                def argocdToken = credentials('argocd-token')
                def appName = "persudoku"  // Replace with your Argo CD application name
                def argoCdServer = "10.0.0.10:30080"
                def argoCdUrl = "https://${argoCdServer}/api/v1/applications/${appName}/sync"  // Replace with your Argo CD server URL
                
                sh """
                curl -k -X POST ${argoCdUrl} \
                    -H "Authorization: Bearer ${argocdToken}" \
                    -H "Content-Type: application/json" \
                    -d '{}'
                """
            }
        }
    }
}

post {
    always {
        echo 'Pipeline POST:'
    }
    success {
        echo 'Pipeline SUCCESS!'
    }
    failure {
        echo 'Pipeline FAILED, check the logs for more information!'
    }
}
