pipeline {
  agent {
    kubernetes {
      label 'jenkins-slave-pipeline-b'
      defaultContainer 'custom'
      yaml """
apiVersion: v1
kind: Pod
spec:
  serviceAccountName: jenkins-sa
  containers:
  - name: custom
    image: roiyki/inbound-agent2:latest
    command:
    - cat
    tty: true
    securityContext:
      privileged: true
    volumeMounts:
    - mountPath: /var/run/docker.sock
      name: docker-sock
    env:
    - name: DOCKER_HOST
      value: "unix:///var/run/docker.sock"
  volumes:
  - name: docker-sock
    hostPath:
      path: /var/run/docker.sock
"""
    }
  }

  environment {
    GITHUB_TOKEN = credentials('github-secret-read-jenkins')
    DOCKER_HUB_CREDENTIALS = credentials('docker-credentials')
    IMAGE_NAME = 'persudoku-flask'
    IMAGE_TAG = 'latest'
  }

  stages {
    stage('Ensure Docker Daemon') {
      steps {
        script {
          // No sudo needed, directly checking docker status
          def dockerStatus = sh(script: 'docker info > /dev/null 2>&1', returnStatus: true)
          if (dockerStatus != 0) {
            error 'Docker daemon is not running.'
          }
        }
      }
    }

    stage('Clone Repository') {
      steps {
        container('custom') {
          script {
            sh 'git clone https://github.com/Roiyki/Persudoku.git'
            sh 'cd Persudoku'
          }
        }
      }
    }

    stage('Build and Push Docker Image') {
      steps {
        container('custom') {
          script {
            try {
              withCredentials([usernamePassword(credentialsId: 'docker-credentials', usernameVariable: 'DOCKER_HUB_USERNAME', passwordVariable: 'DOCKER_HUB_PASSWORD')]) {
                sh "docker login -u $DOCKER_HUB_USERNAME -p $DOCKER_HUB_PASSWORD"
                def dirPath = sh(script: 'find . -type d -name Inboundagent2', returnStdout: true).trim()
                sh "docker build -t roiyki/$IMAGE_NAME:$IMAGE_TAG $dirPath"
                sh "docker push roiyki/$IMAGE_NAME:$IMAGE_TAG"
              }
            } catch (Exception e) {
              echo "Failed to build and push Docker image: ${e.message}"
              currentBuild.result = 'FAILURE'
            }
          }
        }
      }
    }
  }
}
