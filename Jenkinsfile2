pipeline {
    agent {
        kubernetes {
            label 'jenkins-slave-pipeline-b'
            defaultContainer 'docker' // Use a container with Docker installed
            yaml '''
            apiVersion: v1
            kind: Pod
            spec:
              containers:
              - name: docker
                image: docker:19.03.12
                command:
                - cat
                tty: true
                volumeMounts:
                - name: docker-sock
                  mountPath: /var/run/docker.sock
              volumes:
              - name: docker-sock
                hostPath:
                  path: /var/run/docker.sock
            '''
        }
    }

    environment {
        DOCKER_IMAGE = "roiyki/persudoku-flask"
        DOCKERHUB_CREDENTIALS = 'dockerhub-credentials' // Define Docker Hub credentials
    }

    stages {
        stage('Checkout Code') {
            steps {
                echo 'Checking out code...'
                checkout scm
            }
        }

        stage('Build Docker Image') {
            steps {
                container('docker') { // Use the Docker container
                    script {
                        echo 'Building Docker image...'
                        sh "find / -name backend"
                        sh "docker build -t ${DOCKER_IMAGE}:latest ./app/backend"
                    }
                }
            }
        }

        stage('Push Docker Images') {
            when {
                branch 'main'
            }
            steps {
                container('docker') { // Use the Docker container
                    script {
                        echo 'Pushing Docker image to registry...'
                        withDockerRegistry(credentialsId: "${DOCKERHUB_CREDENTIALS}") {
                            sh "docker push ${DOCKER_IMAGE}:latest"
                        }
                    }
                }
            }
        }
        
        stage('Cleanup') {
            steps {
                container('docker') {
                    script {
                        echo 'Cleaning up...'
                        sh 'docker system prune -f'
                    }
                }
            }
        }
    }

    post {
        always {
            echo 'Pipeline completed.'
        }
        success {
            echo 'Pipeline succeeded.'
        }
        failure {
            echo 'Pipeline failed.'
        }
    }
}
